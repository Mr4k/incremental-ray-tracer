# dune build @fmt --auto-promote
# OCAMLPARAM: unset
# Workspace root: /Users/peterstefek/Projects/incremental-computation
$ /usr/bin/getconf _NPROCESSORS_ONLN > /var/folders/c3/7174yc593_5ckmdfxzv3fl3m0000gn/T/dune620099.output 2> /dev/null
# Auto-detected concurrency: 4
# disable binary cache
$ /usr/local/bin/ocamlc.opt -config > /var/folders/c3/7174yc593_5ckmdfxzv3fl3m0000gn/T/dunea70a64.output
# Dune context:
#  { name = "default"
#  ; kind = "default"
#  ; profile = Dyn
#  ; merlin = true
#  ; for_host = None
#  ; fdo_target_exe = None
#  ; build_dir = "default"
#  ; toplevel_path =
#      Some External "/Users/peterstefek/.opam/default/lib/toplevel"
#  ; ocaml_bin = External "/usr/local/bin"
#  ; ocaml = Ok External "/Users/peterstefek/.opam/default/bin/ocaml"
#  ; ocamlc = External "/usr/local/bin/ocamlc.opt"
#  ; ocamlopt = Ok External "/usr/local/bin/ocamlopt.opt"
#  ; ocamldep = Ok External "/usr/local/bin/ocamldep.opt"
#  ; ocamlmklib = Ok External "/usr/local/bin/ocamlmklib.opt"
#  ; env =
#      map
#        { "INSIDE_DUNE" :
#            "/Users/peterstefek/Projects/incremental-computation/_build/default"
#        ; "MANPATH" :
#            "/Users/peterstefek/Projects/incremental-computation/_build/install/default/bin"
#        ; "OCAMLFIND_IGNORE_DUPS_IN" :
#            "/Users/peterstefek/Projects/incremental-computation/_build/install/default/lib"
#        ; "OCAMLPATH" :
#            "/Users/peterstefek/Projects/incremental-computation/_build/install/default/lib"
#        ; "OCAMLTOP_INCLUDE_PATH" :
#            "/Users/peterstefek/Projects/incremental-computation/_build/install/default/lib/toplevel"
#        ; "OCAML_COLOR" : "always"
#        ; "OPAMCOLOR" : "always"
#        }
#  ; findlib_path = [ External "/Users/peterstefek/.opam/default/lib" ]
#  ; arch_sixtyfour = true
#  ; natdynlink_supported = true
#  ; supports_shared_libraries = true
#  ; ocaml_config =
#      { version = "4.10.0"
#      ; standard_library_default = "/usr/local/lib/ocaml"
#      ; standard_library = "/usr/local/lib/ocaml"
#      ; standard_runtime = "the_standard_runtime_variable_was_deleted"
#      ; ccomp_type = "cc"
#      ; c_compiler = "clang"
#      ; ocamlc_cflags = [ "-O2"; "-fno-strict-aliasing"; "-fwrapv" ]
#      ; ocamlc_cppflags = [ "-D_FILE_OFFSET_BITS=64"; "-D_REENTRANT" ]
#      ; ocamlopt_cflags = [ "-O2"; "-fno-strict-aliasing"; "-fwrapv" ]
#      ; ocamlopt_cppflags = [ "-D_FILE_OFFSET_BITS=64"; "-D_REENTRANT" ]
#      ; bytecomp_c_compiler =
#          [ "clang"
#          ; "-O2"
#          ; "-fno-strict-aliasing"
#          ; "-fwrapv"
#          ; "-D_FILE_OFFSET_BITS=64"
#          ; "-D_REENTRANT"
#          ]
#      ; bytecomp_c_libraries = [ "-lm"; "-lpthread" ]
#      ; native_c_compiler =
#          [ "clang"
#          ; "-O2"
#          ; "-fno-strict-aliasing"
#          ; "-fwrapv"
#          ; "-D_FILE_OFFSET_BITS=64"
#          ; "-D_REENTRANT"
#          ]
#      ; native_c_libraries = [ "-lm" ]
#      ; cc_profile = []
#      ; architecture = "amd64"
#      ; model = "default"
#      ; int_size = 63
#      ; word_size = 64
#      ; system = "macosx"
#      ; asm = [ "clang"; "-arch"; "x86_64"; "-Wno-trigraphs"; "-c" ]
#      ; asm_cfi_supported = true
#      ; with_frame_pointers = false
#      ; ext_exe = ""
#      ; ext_obj = ".o"
#      ; ext_asm = ".s"
#      ; ext_lib = ".a"
#      ; ext_dll = ".so"
#      ; os_type = "Unix"
#      ; default_executable_name = "a.out"
#      ; systhread_supported = true
#      ; host = "x86_64-apple-darwin18.7.0"
#      ; target = "x86_64-apple-darwin18.7.0"
#      ; profiling = false
#      ; flambda = false
#      ; spacetime = false
#      ; safe_string = true
#      ; exec_magic_number = "Caml1999X027"
#      ; cmi_magic_number = "Caml1999I027"
#      ; cmo_magic_number = "Caml1999O027"
#      ; cma_magic_number = "Caml1999A027"
#      ; cmx_magic_number = "Caml1999Y027"
#      ; cmxa_magic_number = "Caml1999Z027"
#      ; ast_impl_magic_number = "Caml1999M027"
#      ; ast_intf_magic_number = "Caml1999N027"
#      ; cmxs_magic_number = "Caml1999D027"
#      ; cmt_magic_number = "Caml1999T027"
#      ; natdynlink_supported = true
#      ; supports_shared_libraries = true
#      ; windows_unicode = false
#      }
#  }
$ (cd _build/default && /Users/peterstefek/.opam/default/bin/ocamlformat --impl ray_tracer.ml) > _build/default/.formatted/ray_tracer.ml
$ (cd _build/default && /usr/local/bin/git diff --no-index --color=always -u ray_tracer.ml .formatted/ray_tracer.ml)
> diff --git a/ray_tracer.ml b/.formatted/ray_tracer.ml
> index 9d7dcce..66a18b7 100644
> --- a/ray_tracer.ml
> +++ b/.formatted/ray_tracer.ml
> @@ -115,7 +115,11 @@ let () = Random.init 0
>  (* this function contains a gross hack to take a fake argument which by passes ocaml's apparent restriction on recursive no argument functions*)
>  let rec random_point_in_unit_sphere _ =
>    let randVec =
> -    { x = (Random.float 2.0) -. 1.0; y = (Random.float 2.0) -. 1.0; z = (Random.float 2.0) -. 1.0; }
> +    {
> +      x = Random.float 2.0 -. 1.0;
> +      y = Random.float 2.0 -. 1.0;
> +      z = Random.float 2.0 -. 1.0;
> +    }
>    in
>    if Float.(dot randVec randVec > 0.0) then randVec
>    else random_point_in_unit_sphere 0.0
> @@ -130,7 +134,9 @@ let rec trace r n =
>          add (scale white (1.0 -. t)) (scale sky_dark_blue t)
>      | Some hit_record ->
>          (*scale (add hit_record.face_normal { x = 1.0; y = 1.0; z = 1.0 }) 0.5*)
> -        let direction = add (random_point_in_unit_sphere 0.0) hit_record.face_normal in
> +        let direction =
> +          add (random_point_in_unit_sphere 0.0) hit_record.face_normal
> +        in
>          scale (trace { origin = hit_record.position; direction } (n - 1)) 0.5
>  
>  let screen_coords =
> @@ -173,9 +179,9 @@ let resulting_colors =
>          (1.0 /. fsamples_per_pixel))
>  
>  let pack_color_to_int color =
> -  let r = min (int_of_float ((Float.sqrt color.x) *. 256.0)) 255 in
> -  let g = min (int_of_float ((Float.sqrt color.y) *. 256.0)) 255 in
> -  let b = min (int_of_float ((Float.sqrt color.z) *. 256.0)) 255 in
> +  let r = min (int_of_float (Float.sqrt color.x *. 256.0)) 255 in
> +  let g = min (int_of_float (Float.sqrt color.y *. 256.0)) 255 in
> +  let b = min (int_of_float (Float.sqrt color.z *. 256.0)) 255 in
>    b lor ((g lor (r lsl 8)) lsl 8)
>  
>  let () =
[1]
